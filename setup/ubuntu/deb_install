#!/bin/bash
set -eux -o pipefail

# Adapted from `drake`s `install_prereqs.sh`.
cur=$(cd $(dirname ${BASH_SOURCE}) && pwd)

die() {
  echo $@ >&2
  exit 1
}

dpkg_install_from_wget() {
  package="$1"
  version="$2"
  url="$3"
  checksum="$4"

  # Skip the install if we're already at the exact version.
  installed=$(dpkg-query --showformat='${Version}\n' --show "${package}" 2>/dev/null || true)
  if [[ "${installed}" == "${version}" ]]; then
    echo "${package} is already at the desired version ${version}"
    return
  fi

  # Download and verify.
  tmpdeb="/tmp/${package}_${version}-amd64.deb"
  wget -O "${tmpdeb}" "${url}"
  if echo "${checksum} ${tmpdeb}" | sha256sum -c -; then
    echo  # Blank line between checkout output and dpkg output.
  else
    echo "The ${package} deb does not have the expected SHA256. Not installing." >&2
    exit 2
  fi

  # Install.
  dpkg -i "${tmpdeb}"
  rm "${tmpdeb}"
}

apt-get update

# Ensure we can fetch things and check our system.
apt-get install --no-install-recommends $(cat <<EOF
  ca-certificates
  lsb-release
  wget
EOF
)

# Install bazel package dependencies (these may duplicate dependencies of
# drake).
apt-get install --no-install-recommends $(cat <<EOF
g++
unzip
zlib1g-dev
EOF
)

# Install bazel.
dpkg_install_from_wget \
  bazel 5.0.0 \
  https://releases.bazel.build/5.0.0/release/bazel_5.0.0-linux-x86_64.deb \
  e3361645ccd731abc424bb3a322d8e6f513b7258f5ca11ff04d6067aff5d09b1

apt-get install --no-install-recommends lsb-release

codename=$(lsb_release -sc)

# Ensure we can use vanilla Python 3's pip.
if [[ ${codename} != "focal" ]]; then
  die "Unsupported Ubuntu version: ${codename}"
fi

apt-get install --no-install-recommends $(cat <<-EOF
libpython3-stdlib
python-is-python3
python3-minimal
python3-pip
EOF
)

# Ensure we can use `sudo`. (See notes in `test.sh`).
apt-get install --no-install-recommends $(cat <<EOF
sudo
EOF
)
